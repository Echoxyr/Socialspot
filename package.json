{
“package.json”: {
“name”: “socialspot-backend”,
“version”: “1.0.0”,
“description”: “SocialSpot Backend API - Social events platform for meeting people locally”,
“main”: “server.js”,
“scripts”: {
“start”: “node server.js”,
“dev”: “nodemon server.js”,
“test”: “jest –detectOpenHandles”,
“test:watch”: “jest –watch”,
“lint”: “eslint . –ext .js”,
“lint:fix”: “eslint . –ext .js –fix”,
“seed”: “node scripts/seed.js”,
“build”: “echo ‘No build step required for Node.js backend’”,
“deploy”: “vercel –prod”
},
“keywords”: [
“social”,
“events”,
“meetup”,
“nodejs”,
“express”,
“mongodb”,
“socket.io”,
“geolocation”
],
“author”: “SocialSpot Team”,
“license”: “MIT”,
“dependencies”: {
“express”: “^4.18.2”,
“mongoose”: “^7.5.0”,
“bcryptjs”: “^2.4.3”,
“jsonwebtoken”: “^9.0.2”,
“cors”: “^2.8.5”,
“helmet”: “^7.0.0”,
“express-rate-limit”: “^6.10.0”,
“validator”: “^13.11.0”,
“multer”: “^1.4.5-lts.1”,
“socket.io”: “^4.7.2”,
“dotenv”: “^16.3.1”,
“axios”: “^1.5.0”
},
“devDependencies”: {
“nodemon”: “^3.0.1”,
“jest”: “^29.6.4”,
“supertest”: “^6.3.3”,
“eslint”: “^8.48.0”,
“@types/jest”: “^29.5.5”
},
“engines”: {
“node”: “>=16.0.0”,
“npm”: “>=8.0.0”
},
“repository”: {
“type”: “git”,
“url”: “https://github.com/your-username/socialspot-backend.git”
}
},

“.env.example”: “# SocialSpot Backend Configuration\n# Copy this file to .env and update the values\n\n# Server Configuration\nPORT=5000\nNODE_ENV=development\n\n# Database\nMONGODB_URI=mongodb://localhost:27017/socialspot\n\n# Authentication\nJWT_SECRET=your-super-secret-jwt-key-change-in-production-minimum-32-characters\nJWT_EXPIRES_IN=7d\n\n# Frontend URL (for CORS)\nFRONTEND_URL=http://localhost:3000\n\n# Google Maps API\nGOOGLE_MAPS_API_KEY=your-google-maps-api-key\n\n# Email Configuration (for notifications)\nEMAIL_SERVICE=gmail\nEMAIL_USER=your-email@gmail.com\nEMAIL_PASS=your-app-password\nEMAIL_FROM=noreply@socialspot.com\n\n# File Upload\nMAX_FILE_SIZE=5242880\nUPLOADS_DIR=uploads\n\n# Rate Limiting\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX=100\n\n# Logging\nLOG_LEVEL=info\n\n# Redis (for session storage in production)\nREDIS_URL=redis://localhost:6379”,

“.env.production”: “# Production Environment Variables\n# Set these in your hosting platform (Vercel, Railway, etc.)\n\nPORT=5000\nNODE_ENV=production\n\n# Production MongoDB (MongoDB Atlas)\nMONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/socialspot?retryWrites=true&w=majority\n\n# Strong JWT Secret (generate with: openssl rand -base64 64)\nJWT_SECRET=your-production-jwt-secret-minimum-64-characters-long\nJWT_EXPIRES_IN=7d\n\n# Production Frontend URL\nFRONTEND_URL=https://socialspot.vercel.app\n\n# Google Maps API (Production Key)\nGOOGLE_MAPS_API_KEY=your-production-google-maps-api-key\n\n# Production Email\nEMAIL_SERVICE=gmail\nEMAIL_USER=noreply@socialspot.com\nEMAIL_PASS=your-production-email-password\nEMAIL_FROM=SocialSpot [noreply@socialspot.com](mailto:noreply@socialspot.com)\n\n# Production Settings\nMAX_FILE_SIZE=10485760\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX=200\nLOG_LEVEL=warn”,

“vercel.json”: {
“version”: 2,
“builds”: [
{
“src”: “server.js”,
“use”: “@vercel/node”
}
],
“routes”: [
{
“src”: “/(.*)”,
“dest”: “/server.js”
}
],
“env”: {
“NODE_ENV”: “production”
},
“functions”: {
“server.js”: {
“maxDuration”: 30
}
}
},

“railway.json”: {
“build”: {
“command”: “npm install”
},
“start”: {
“command”: “npm start”
},
“healthcheck”: {
“path”: “/api/health”,
“timeout”: 30
}
},

“Dockerfile”: “# Use Node.js LTS Alpine image\nFROM node:18-alpine\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm ci –only=production && npm cache clean –force\n\n# Copy source code\nCOPY . .\n\n# Create uploads directory\nRUN mkdir -p uploads && chown -R node:node uploads\n\n# Expose port\nEXPOSE 5000\n\n# Switch to node user\nUSER node\n\n# Health check\nHEALTHCHECK –interval=30s –timeout=3s –start-period=5s –retries=3 \\n  CMD node healthcheck.js\n\n# Start application\nCMD ["npm", "start"]”,

“docker-compose.yml”: “version: ‘3.8’\n\nservices:\n  # SocialSpot API Server\n  socialspot-api:\n    build: .\n    ports:\n      - ‘5000:5000’\n    environment:\n      - NODE_ENV=production\n      - MONGODB_URI=mongodb://mongo:27017/socialspot\n      - JWT_SECRET=your-docker-jwt-secret\n      - FRONTEND_URL=http://localhost:3000\n    depends_on:\n      - mongo\n    volumes:\n      - ./uploads:/app/uploads\n    restart: unless-stopped\n    networks:\n      - socialspot-network\n\n  # MongoDB Database\n  mongo:\n    image: mongo:6\n    ports:\n      - ‘27017:27017’\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME=admin\n      - MONGO_INITDB_ROOT_PASSWORD=password123\n      - MONGO_INITDB_DATABASE=socialspot\n    volumes:\n      - mongodb_data:/data/db\n      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro\n    restart: unless-stopped\n    networks:\n      - socialspot-network\n\n  # Redis (for caching and sessions)\n  redis:\n    image: redis:7-alpine\n    ports:\n      - ‘6379:6379’\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n    networks:\n      - socialspot-network\n\n  # Nginx (reverse proxy)\n  nginx:\n    image: nginx:alpine\n    ports:\n      - ‘80:80’\n      - ‘443:443’\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./ssl:/etc/nginx/ssl:ro\n    depends_on:\n      - socialspot-api\n    restart: unless-stopped\n    networks:\n      - socialspot-network\n\nvolumes:\n  mongodb_data:\n  redis_data:\n\nnetworks:\n  socialspot-network:\n    driver: bridge”,

“.dockerignore”: “node_modules\n.npm\nnpm-debug.log*\n.git\n.gitignore\nREADME.md\n.env\n.env.local\n.env.production\n.nyc_output\ncoverage\n.vscode\n.idea\ntest\n*.test.js\n*.spec.js”,

“.gitignore”: “# Dependencies\nnode_modules/\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Environment variables\n.env\n.env.local\n.env.production\n.env.test\n\n# Uploaded files\nuploads/*\n!uploads/.gitkeep\n\n# Logs\nlogs/\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Coverage directory used by tools like istanbul\ncoverage/\n.nyc_output\n\n# Dependency directories\nnode_modules/\n\n# Optional npm cache directory\n.npm\n\n# Optional REPL history\n.node_repl_history\n\n# Output of ‘npm pack’\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# IDE files\n.vscode/\n.idea/\n*.swp\n*.swo\n*~\n\n# OS generated files\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n\n# Build directories\nbuild/\ndist/\n\n# Test files\n*.test.js.snap\n\n# Temporary files\ntmp/\ntemp/”,

“healthcheck.js”: “// Health check script for Docker\nconst http = require(‘http’);\n\nconst options = {\n  host: ‘localhost’,\n  port: process.env.PORT || 5000,\n  path: ‘/api/health’,\n  timeout: 2000\n};\n\nconst request = http.request(options, (res) => {\n  console.log(‘Health check status:’, res.statusCode);\n  if (res.statusCode === 200) {\n    process.exit(0);\n  } else {\n    process.exit(1);\n  }\n});\n\nrequest.on(‘error’, (err) => {\n  console.log(‘Health check failed:’, err.message);\n  process.exit(1);\n});\n\nrequest.on(‘timeout’, () => {\n  console.log(‘Health check timeout’);\n  request.destroy();\n  process.exit(1);\n});\n\nrequest.end();”,

“nginx.conf”: “events {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream api {\n        server socialspot-api:5000;\n    }\n\n    server {\n        listen 80;\n        server_name localhost;\n\n        # API routes\n        location /api/ {\n            proxy_pass http://api;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n        # WebSocket support\n        location /socket.io/ {\n            proxy_pass http://api;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection "upgrade";\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n        # Uploaded files\n        location /uploads/ {\n            proxy_pass http://api;\n            proxy_set_header Host $host;\n        }\n\n        # Health check\n        location /health {\n            access_log off;\n            return 200 "healthy\n";\n            add_header Content-Type text/plain;\n        }\n    }\n}”,

“uploads/.gitkeep”: “”,

“scripts/mongo-init.js”: “// MongoDB initialization script\ndb = db.getSiblingDB(‘socialspot’);\n\n// Create collections\ndb.createCollection(‘users’);\ndb.createCollection(‘events’);\ndb.createCollection(‘messages’);\ndb.createCollection(‘notifications’);\n\n// Create indexes\ndb.users.createIndex({ email: 1 }, { unique: true });\ndb.users.createIndex({ location: ‘2dsphere’ });\ndb.events.createIndex({ ‘location.coordinates’: ‘2dsphere’ });\ndb.events.createIndex({ date: 1 });\ndb.events.createIndex({ category: 1 });\ndb.messages.createIndex({ event: 1, createdAt: 1 });\ndb.notifications.createIndex({ user: 1, createdAt: -1 });\n\nconsole.log(‘MongoDB initialized with collections and indexes’);”,

“scripts/seed.js”: “// Seed script for development data\nconst mongoose = require(‘mongoose’);\nconst bcrypt = require(‘bcryptjs’);\nrequire(‘dotenv’).config();\n\n// Import your models here - you’ll need to copy the schemas from server.js\n// or better yet, extract them to separate files\n\nconst seedData = async () => {\n  try {\n    console.log(‘🌱 Starting database seed…’);\n    \n    await mongoose.connect(process.env.MONGODB_URI || ‘mongodb://localhost:27017/socialspot’);\n    console.log(‘✅ Connected to MongoDB’);\n    \n    // Clear existing data\n    console.log(‘🗑️  Clearing existing data…’);\n    await mongoose.connection.db.dropDatabase();\n    \n    // Create test users\n    console.log(‘👥 Creating test users…’);\n    const hashedPassword = await bcrypt.hash(‘password123’, 12);\n    \n    const users = [\n      {\n        name: ‘Sofia Martini’,\n        email: ‘sofia@socialspot.com’,\n        password: hashedPassword,\n        city: ‘Milano’,\n        district: ‘Navigli’,\n        interests: [‘aperitivi’, ‘cinema’, ‘arte’],\n        location: { coordinates: [9.1900, 45.4642] },\n        rating: 4.8,\n        eventsCreated: 5,\n        eventsJoined: 12\n      },\n      {\n        name: ‘Marco Rossi’,\n        email: ‘marco@socialspot.com’,\n        password: hashedPassword,\n        city: ‘Milano’,\n        district: ‘Brera’,\n        interests: [‘sport’, ‘cinema’],\n        location: { coordinates: [9.1950, 45.4700] },\n        rating: 4.6,\n        eventsJoined: 8\n      },\n      {\n        name: ‘Elena Bianchi’,\n        email: ‘elena@socialspot.com’,\n        password: hashedPassword,\n        city: ‘Milano’,\n        district: ‘Porta Nuova’,\n        interests: [‘cultura’, ‘aperitivi’],\n        location: { coordinates: [9.1880, 45.4850] },\n        rating: 4.9,\n        eventsCreated: 3,\n        eventsJoined: 15\n      }\n    ];\n\n    // Note: You’ll need to uncomment this and import your User model\n    // const createdUsers = await User.create(users);\n    \n    // Create test events\n    console.log(‘🎉 Creating test events…’);\n    \n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    \n    const events = [\n      {\n        title: ‘Aperitivo sui Navigli 🍹’,\n        description: ‘Aperitivo rilassante al tramonto con vista canale. Perfetto per conoscere nuove persone e rilassarsi dopo il lavoro!’,\n        category: ‘aperitivo’,\n        location: {\n          name: ‘Mag Cafè, Naviglio Grande’,\n          address: ‘Via Naviglio Grande, 12 - Milano’,\n          coordinates: [9.1900, 45.4642]\n        },\n        date: tomorrow,\n        time: ‘19:00’,\n        maxParticipants: 8,\n        price: ‘15-25€’,\n        ageRange: ‘25-35’,\n        tags: [‘relax’, ‘networking’, ‘sunset’, ‘navigli’],\n        weatherFriendly: true,\n        accessibility: true\n        // organizer: createdUsers[0]._id,\n        // participants: [{ user: createdUsers[0]._id, isOrganizer: true }]\n      },\n      {\n        title: ‘Cinema all\‘aperto - La Dolce Vita’,\n        description: ‘Serata cinematografica nel parco con proiezione del capolavoro di Fellini. Proiezione in alta definizione con sistema audio professionale.’,\n        category: ‘cinema’,\n        location: {\n          name: ‘Parco Lambro’,\n          address: ‘Via Feltre - Milano’,\n          coordinates: [9.2400, 45.4900]\n        },\n        date: new Date(tomorrow.getTime() + 24 * 60 * 60 * 1000),\n        time: ‘21:00’,\n        maxParticipants: 15,\n        price: ‘Gratuito’,\n        ageRange: ‘Tutti’,\n        tags: [‘cinema’, ‘classici’, ‘cultura’, ‘gratis’],\n        weatherFriendly: false,\n        accessibility: true\n      }\n    ];\n\n    // Note: You’ll need to uncomment this and import your Event model\n    // await Event.create(events);\n    \n    console.log(‘✅ Seed data created successfully!’);\n    console.log(’\n🔑 Test login credentials:’);\n    console.log(‘Email: sofia@socialspot.com’);\n    console.log(‘Password: password123’);\n    console.log(’\n📧 All test users use password: password123’);\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(‘❌ Seed error:’, error);\n    process.exit(1);\n  }\n};\n\nif (require.main === module) {\n  seedData();\n}\n\nmodule.exports = seedData;”,

“jest.config.js”: “module.exports = {\n  testEnvironment: ‘node’,\n  collectCoverageFrom: [\n    ‘server.js’,\n    ‘models/**/*.js’,\n    ’routes/**/*.js’,\n    ’middleware/**/*.js’,\n    ‘!**/node_modules/**’\n  ],\n  testMatch: [\n    ‘**/**tests**/**/*.js’,\n    ’**/?(*.)+(spec|test).js’\n  ],\n  setupFilesAfterEnv: [’<rootDir>/tests/setup.js’]\n};”,

“tests/setup.js”: “// Test setup\nconst mongoose = require(‘mongoose’);\nconst { MongoMemoryServer } = require(‘mongodb-memory-server’);\n\nlet mongoServer;\n\nbeforeAll(async () => {\n  mongoServer = await MongoMemoryServer.create();\n  const mongoUri = mongoServer.getUri();\n  await mongoose.connect(mongoUri);\n});\n\nafterAll(async () => {\n  await mongoose.disconnect();\n  await mongoServer.stop();\n});\n\nafterEach(async () => {\n  const collections = mongoose.connection.collections;\n  for (const key in collections) {\n    const collection = collections[key];\n    await collection.deleteMany();\n  }\n});”,

“README.md”: “# 🎉 SocialSpot Backend API\n\n**Social events platform for meeting people locally**\n\nSocialSpot è un’API completa per un social network che permette agli utenti di organizzare e partecipare a eventi locali (aperitivi, cinema, sport, cultura) basati sui loro interessi e posizione geografica.\n\n## 🚀 Features\n\n### 🔐 Autenticazione\n- Registrazione e login sicuri con JWT\n- Hash delle password con bcrypt\n- Gestione profili utente completa\n- Sistema di ruoli (organizzatori/partecipanti)\n\n### 📍 Eventi\n- Creazione eventi con geolocalizzazione\n- Ricerca avanzata con filtri (categoria, distanza, data)\n- Sistema di partecipazione con limiti\n- Rating e recensioni eventi\n- Upload foto eventi\n\n### 💬 Messaggistica Real-time\n- Chat di gruppo per ogni evento\n- WebSocket con Socket.io\n- Notifiche push in tempo reale\n- Indicatori di digitazione\n- Condivisione posizione\n\n### 🔔 Notifiche\n- Sistema completo di notifiche\n- Promemoria eventi\n- Aggiornamenti partecipazioni\n- Nuovi messaggi\n\n### 🗺️ Geolocalizzazione\n- Integrazione Google Maps API\n- Calcolo distanze automatico\n- Ricerca eventi nelle vicinanze\n- Geocoding e reverse geocoding\n\n## 🛠️ Tech Stack\n\n- **Runtime**: Node.js 18+\n- **Framework**: Express.js\n- **Database**: MongoDB con Mongoose\n- **Real-time**: Socket.io\n- **Auth**: JWT + bcrypt\n- **Upload**: Multer\n- **Validation**: Validator.js\n- **Security**: Helmet, CORS, Rate Limiting\n\n## 📦 Quick Start\n\n### 1. Installazione\n\n`bash\n# Clone repository\ngit clone https://github.com/your-username/socialspot-backend.git\ncd socialspot-backend\n\n# Install dependencies\nnpm install\n\n# Setup environment\ncp .env.example .env\n# Edit .env with your configuration\n`\n\n### 2. Database Setup\n\n`bash\n# Option 1: Local MongoDB\nmongod\n\n# Option 2: Docker MongoDB\ndocker run -d -p 27017:27017 --name mongodb mongo:6\n\n# Option 3: MongoDB Atlas (recommended for production)\n# Update MONGODB_URI in .env with your Atlas connection string\n`\n\n### 3. Environment Variables\n\n`bash\n# Required\nMONGODB_URI=mongodb://localhost:27017/socialspot\nJWT_SECRET=your-super-secret-jwt-key-minimum-32-characters\nFRONTEND_URL=http://localhost:3000\n\n# Optional\nGOOGLE_MAPS_API_KEY=your-google-maps-api-key\nPORT=5000\nNODE_ENV=development\n`\n\n### 4. Start Development Server\n\n`bash\n# Start with nodemon (auto-restart)\nnpm run dev\n\n# Or start normally\nnpm start\n\n# Seed test data (optional)\nnpm run seed\n`\n\n### 5. Test the API\n\n`bash\n# Health check\ncurl http://localhost:5000/api/health\n\n# Register a test user\ncurl -X POST http://localhost:5000/api/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Test User\",\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\",\n    \"city\": \"Milano\"\n  }'\n`\n\n## 📡 API Documentation\n\n### Authentication Endpoints\n\n| Method | Endpoint | Description |\n|––––|–––––|———––|\n| POST | `/api/auth/register` | Register new user |\n| POST | `/api/auth/login` | User login |\n| GET | `/api/auth/me` | Get current user |\n| PATCH | `/api/auth/profile` | Update profile |\n\n### Events Endpoints\n\n| Method | Endpoint | Description |\n|––––|–––––|———––|\n| GET | `/api/events` | Get events with filters |\n| POST | `/api/events` | Create new event |\n| GET | `/api/events/:id` | Get event details |\n| POST | `/api/events/:id/join` | Join event |\n| POST | `/api/events/:id/leave` | Leave event |\n| PATCH | `/api/events/:id` | Update event (organizer only) |\n| POST | `/api/events/:id/rate` | Rate event |\n\n### Messages Endpoints\n\n| Method | Endpoint | Description |\n|––––|–––––|———––|\n| GET | `/api/events/:id/messages` | Get event messages |\n| POST | `/api/events/:id/messages` | Send message |\n| PATCH | `/api/messages/:id` | Edit message |\n| DELETE | `/api/messages/:id` | Delete message |\n\n### Notifications Endpoints\n\n| Method | Endpoint | Description |\n|––––|–––––|———––|\n| GET | `/api/notifications` | Get user notifications |\n| PATCH | `/api/notifications/:id/read` | Mark as read |\n| PATCH | `/api/notifications/read-all` | Mark all as read |\n| DELETE | `/api/notifications/:id` | Delete notification |\n\n### Utility Endpoints\n\n| Method | Endpoint | Description |\n|––––|–––––|———––|\n| POST | `/api/upload` | Upload single photo |\n| POST | `/api/upload/multiple` | Upload multiple photos |\n| POST | `/api/geocode` | Geocode address |\n| POST | `/api/reverse-geocode` | Reverse geocode |\n| GET | `/api/places/nearby` | Get nearby places |\n| GET | `/api/health` | Health check |\n\n## 🔧 Advanced Configuration\n\n### Google Maps Integration\n\n1. Get API key from [Google Cloud Console](https://console.cloud.google.com/)\n2. Enable Geocoding API and Places API\n3. Add key to `.env`:\n\n`bash\nGOOGLE_MAPS_API_KEY=your-api-key\n`\n\n### File Upload Configuration\n\n`bash\n# Max file size (5MB default)\nMAX_FILE_SIZE=5242880\n\n# Upload directory\nUPLOADS_DIR=uploads\n`\n\n### Rate Limiting\n\n`bash\n# 15 minutes window\nRATE_LIMIT_WINDOW_MS=900000\n\n# Max 100 requests per window\nRATE_LIMIT_MAX=100\n`\n\n## 🚀 Deployment\n\n### Vercel (Recommended)\n\n`bash\n# Install Vercel CLI\nnpm i -g vercel\n\n# Deploy\nvercel --prod\n\n# Set environment variables in Vercel dashboard\n`\n\n### Railway\n\n1. Connect GitHub repository to Railway\n2. Set environment variables in dashboard\n3. Deploy automatically on push\n\n### DigitalOcean App Platform\n\n1. Create app from GitHub repository\n2. Configure environment variables\n3. Set build and run commands\n\n### Docker\n\n`bash\n# Build and run with Docker Compose\ndocker-compose up -d\n\n# Or build manually\ndocker build -t socialspot-api .\ndocker run -p 5000:5000 socialspot-api\n`\n\n## 🧪 Testing\n\n`bash\n# Run all tests\nnpm test\n\n# Watch mode\nnpm run test:watch\n\n# With coverage\nnpm test -- --coverage\n`\n\n## 📊 Monitoring\n\n### Health Checks\n\n- Endpoint: `GET /api/health`\n- Returns server status, uptime, and environment info\n- Use for load balancer health checks\n\n### Logging\n\n- Structured logging with different levels\n- Error tracking and debugging info\n- Request/response logging in development\n\n## 🔒 Security\n\n### Implemented Security Measures\n\n- **Authentication**: JWT tokens with secure secrets\n- **Password Security**: bcrypt hashing with salt\n- **Rate Limiting**: Prevent API abuse\n- **CORS**: Configurable cross-origin requests\n- **Headers**: Security headers with Helmet\n- **Input Validation**: Mongoose validators + custom validation\n- **File Upload**: Type and size restrictions\n- **SQL Injection**: MongoDB prevents by design\n- **XSS Protection**: Input sanitization\n\n### Production Security Checklist\n\n- [ ] Strong JWT secret (64+ characters)\n- [ ] HTTPS/SSL certificates\n- [ ] Environment variables secured\n- [ ] Database authentication enabled\n- [ ] Rate limiting configured\n- [ ] Error messages don’t leak sensitive info\n- [ ] File upload restrictions in place\n- [ ] CORS properly configured\n- [ ] Monitoring and logging enabled\n\n## 📚 API Examples\n\n### Register User\n\n`javascript\nfetch('/api/auth/register', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    name: 'Sofia Martini',\n    email: 'sofia@example.com',\n    password: 'password123',\n    city: 'Milano',\n    interests: ['aperitivi', 'cinema']\n  })\n})\n`\n\n### Create Event\n\n`javascript\nfetch('/api/events', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer your-jwt-token'\n  },\n  body: JSON.stringify({\n    title: 'Aperitivo sui Navigli',\n    description: 'Rilassante aperitivo al tramonto',\n    category: 'aperitivo',\n    location: {\n      name: 'Mag Cafè',\n      address: 'Via Naviglio Grande, 12',\n      coordinates: [9.1900, 45.4642]\n    },\n    date: '2025-06-28',\n    time: '19:00',\n    maxParticipants: 8\n  })\n})\n`\n\n### WebSocket Connection\n\n`javascript\nconst socket = io('ws://localhost:5000');\n\n// Join user notification room\nsocket.emit('join_user_room', userId);\n\n// Join event chat room\nsocket.emit('join_event_room', eventId);\n\n// Listen for new messages\nsocket.on('new_message', (message) => {\n  console.log('New message:', message);\n});\n\n// Listen for notifications\nsocket.on('new_notification', (notification) => {\n  console.log('New notification:', notification);\n});\n`\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit changes (`git commit -m 'Add amazing feature'`)\n4. Push to branch (`git push origin feature/amazing-feature`)\n5. Open Pull Request\n\n### Code Style\n\n- Use ESLint configuration\n- Follow JavaScript Standard Style\n- Write meaningful commit messages\n- Add tests for new features\n\n## 📄 License\n\nMIT License - see <LICENSE> file for details\n\n## 🆘 Support\n\n- 📧 Email: support@socialspot.com\n- 💬 Discord: [SocialSpot Community](https://discord.gg/socialspot)\n- 🐛 Issues: [GitHub Issues](https://github.com/your-username/socialspot-backend/issues)\n- 📖 Wiki: [Project Wiki](https://github.com/your-username/socialspot-backend/wiki)\n\n## 🗺️ Roadmap\n\n### Version 1.1\n- [ ] Push notifications (FCM/APNs)\n- [ ] Advanced search filters\n- [ ] Event categories expansion\n- [ ] User blocking/reporting\n\n### Version 1.2\n- [ ] Event recommendations AI\n- [ ] Social features (friends, follows)\n- [ ] Payment integration (Stripe)\n- [ ] Advanced analytics\n\n### Version 2.0\n- [ ] Multi-language support\n- [ ] Video calls integration\n- [ ] Event live streaming\n- [ ] Marketplace features\n\n—\n\n**Made with ❤️ by the SocialSpot Team**”
